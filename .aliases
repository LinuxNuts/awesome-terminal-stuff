#############################################################
# Shorthand aliases											#
#############################################################
alias ..='cd ..'
alias ls='ls -G'
alias sourceit='source ~/.bash_profile'
alias fn='find . -name'
alias editawesomeness='e ~/src/awesome-terminal-stuff; e ~/src/awesome-terminal-stuff/.aliases'

#############################################################
# Shortcuts													#
#############################################################

alias d='cd ~/Dropbox'
alias s='cd ~/src'
alias e='subl'

#############################################################
# git aliases												#
#############################################################
alias gc='git checkout'
alias gcm='gc master'
alias gm='git commit -m'
alias gb='git branch'
alias gd='git diff --color'
alias gdc='gd --cached'
alias gs='git status'
alias ga='git add -A'
alias gl='git log --graph --pretty=format:"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset" --abbrev-commit --date=relative'
alias gsl='git stash list'
alias latest='git pull origin master'
alias fuckit='git reset --hard'
alias masterbase='git rebase master'
alias softreset='git reset --soft HEAD^'

git_checkout_latest_branch_except_master () {
	LATEST_BRANCH=`git for-each-ref --count=1 --sort=-committerdate refs/heads/_dschukin* --format='%(refname:short)'`
	gc $LATEST_BRANCH
}
alias gcl=git_checkout_latest_branch_except_master

git_stash_apply () {
	git stash apply stash@{$1}
}

alias gsa=git_stash_apply

git_commit_everything () {
	ga
	gs
	NEXT_COMMIT_MESSAGE=`curl -s http://whatthecommit.com | perl -p0e '($_)=m{<p>(.+?)</p>}s'`
	echo $NEXT_COMMIT_MESSAGE
	gm "[WIP] $NEXT_COMMIT_MESSAGE"
}

alias gce=git_commit_everything

git_uncommit_wip () {
	LAST_COMMIT_MESSAGE=`git log --pretty=format:"%s" -n 1`
	LAST_COMMIT_MESSAGE_PREFIX=`echo $LAST_COMMIT_MESSAGE | cut -c1-5`
	if [ "$LAST_COMMIT_MESSAGE_PREFIX" = "[WIP]" ]; then
		git reset --soft HEAD^
		echo "Unwipped last commit"
		gs
	else
		echo "Error: Last commit was not a WIP!"
		echo "       Prefix must start with \"[WIP]\" (last commit was \"$LAST_COMMIT_MESSAGE\")"
	fi;
}

alias unwip=git_uncommit_wip

#############################################################
# Rails aliases												#
#############################################################

alias bi='bundle install'

#############################################################
# Shortcut for grepping stuff								#
#############################################################
find_in_files () {
	if [ $# -ne 1 ]
	then
		echo "Whoa buddy, you need to enter a term to search for."
		echo "Example:"
		echo "	ff 'dave'"
	else
		grep -lr -i $1 .
	fi
}

alias ff=find_in_files

#############################################################
# Xcode / Cocoapods											#
#############################################################
alias repod='rm -rf Pods Podfile.lock ; pod install'
close_and_repod () {
	ruby ~/src/awesome-terminal-stuff/close_xcode_window.rb
	repod
	open *.xcworkspace
}

alias crepod=close_and_repod

nuke_derived_data () {
	rm -rf ~/Library/Developer/Xcode/DerivedData/*
}

alias oxw='open *.xcworkspace'
alias oxp='open *.xcproject'

# http://lightyearsoftware.com/2012/08/use-a-ram-disk-for-deriveddata/
ram-derived-data() {
	RAM_DISK_PATH=`hdid -nomount ram://4194304`
	echo "Mounting at $RAM_DISK_PATH"
	newfs_hfs -v DerivedData $RAM_DISK_PATH
	diskutil mount -mountPoint ~/Library/Developer/Xcode/DerivedData $RAM_DISK_PATH
}